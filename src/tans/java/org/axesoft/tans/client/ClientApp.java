/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.axesoft.tans.client;

import com.google.common.collect.ImmutableList;
import io.netty.buffer.Unpooled;
import io.netty.handler.codec.http.*;
import io.netty.util.CharsetUtil;
import org.apache.commons.lang3.time.StopWatch;
import org.axesoft.jaxos.base.LongRange;

import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class ClientApp {

    public static final List<String> URLS = ImmutableList.of(
            "http://localhost:8081/acquire?key=monkey.id&n=3"
            , "http://localhost:8081/acquire?key=star.id&n=2"
            , "http://localhost:8081/acquire?key=pig.id&n=1"
    );

    public static void main(String[] args) throws Exception {
        main1(args);
    }

    public static void main1(String[] args) throws Exception {
        int n = 4000;
        int k = 25;

        TansClientBootstrap cb = new TansClientBootstrap("localhost:8081");
        final CountDownLatch startLatch = new CountDownLatch(1);
        final CountDownLatch endLatch = new CountDownLatch(k);
        for (int i = 0; i < k; i++) {
            final TansClient client = cb.getClient();
            final String key = "id" + i;
            new Thread(() -> {
                try {
                    startLatch.await();
                    System.out.println("Start thread for " + key);

                    ClientApp.runClient(client, key, 3, n);
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
                finally {
                    System.out.println("End thread for " + key);
                    endLatch.countDown();
                    client.close();
                }

            }).start();
        }

        StopWatch watch = StopWatch.createStarted();
        startLatch.countDown();

        endLatch.await();
        watch.stop();
        double total = watch.getTime(TimeUnit.MILLISECONDS);
        System.out.println(String.format("elapsed %.0f ms, total OPS is %.1f", total,  (n * k) / (total / 1000)));
        cb.close();
    }

    private static void runClient(TansClient client, String key, int v, int times) {
        int i = 0;
        StopWatch watch = StopWatch.createStarted();
        try {

            do {
                LongRange r = client.acquire(key, v);
                i++;
            } while (i < times);
        }
        catch (TimeoutException e) {
            e.printStackTrace();
        }
        watch.stop();
        if (i > 0) {
            double total = watch.getTime(TimeUnit.MILLISECONDS);
            System.out.println(String.format("elapsed %.0f ms, %.2f ms per req", total, total / i));
        }
    }

    public static void main2(String[] args) throws Exception {
        String pattern = "http://localhost:8081/acquire?key=%s&n=%d";

        for (int i = 0; i < 10; i++) {
            List<String> urls = new ArrayList<>();
            for (int j = 0; j < 100; j++) {
                int k = (i + 1) * 10000 + j;
                urls.add(String.format(pattern, "object" + k + ".id", i % 5 + 1));
            }

            ClientApp app = new ClientApp();
            app.run(urls, 1, 300);//URLS.subList(0, 3));
        }
    }

    public void run(List<String> urls, int connections, int total) throws Exception {
        HttpTaskRunner runner = new HttpTaskRunner(this::handleResponse);
        for (String url : urls) {
            URI uri = toUri(url);
            runner.addTask(uri.getHost(), uri.getPort(), createRequest(uri),
                    connections, total);
        }
        runner.run();
    }

    private static HttpRequest createRequest(URI uri) {
        HttpRequest request = new DefaultFullHttpRequest(
                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getPath() + "?" + uri.getQuery(), Unpooled.EMPTY_BUFFER);
        request.headers().set(HttpHeaderNames.HOST, uri.getHost());
        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);
        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.TEXT_PLAIN);

        return request;
    }

    private void handleResponse(InetSocketAddress from, HttpResponse response, HttpContent content) {
        //System.out.println("processEvent");
        boolean isRedirect = HttpTaskRunner.isRedirectCode(response.status().code());
        String s = isRedirect ?
                response.headers().get(HttpHeaderNames.LOCATION)
                : content.content().toString(CharsetUtil.UTF_8).lines().findFirst().orElseGet(() -> "");

        String info = String.format("%s, %s, %s [%s]",
                response.headers().get(HttpHeaderNames.HOST),
                response.headers().get(HttpHeaderNames.FROM),
                response.status().codeAsText(),
                s);
        System.err.println(info);
    }

    private URI toUri(String url) {
        try {
            return new URI(url);
        }
        catch (URISyntaxException e) {
            throw new RuntimeException();
        }
    }
}
