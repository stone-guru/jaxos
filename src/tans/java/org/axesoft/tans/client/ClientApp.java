/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.axesoft.tans.client;

import com.google.common.collect.ImmutableList;
import io.netty.buffer.Unpooled;
import io.netty.handler.codec.http.*;
import io.netty.util.CharsetUtil;
import io.netty.util.concurrent.Future;
import org.apache.commons.lang3.time.StopWatch;
import org.axesoft.jaxos.base.LongRange;

import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class ClientApp {

    public static final List<String> URLS = ImmutableList.of(
            "http://localhost:8081/acquire?key=monkey.id&n=3"
            , "http://localhost:8081/acquire?key=star.id&n=2"
            , "http://localhost:8081/acquire?key=pig.id&n=1"
    );

    public static void main(String[] args) throws Exception {
        main1(args);
    }

    public static void main1(String[] args) throws Exception {
        int n = 10000;
        int k = 30;

        TansClientBootstrap cb = new TansClientBootstrap("localhost:8083");
        final CountDownLatch startLatch = new CountDownLatch(1);
        final CountDownLatch endLatch = new CountDownLatch(k);
        final ExecutorService executor = Executors.newFixedThreadPool(k/2);

        for (int i = 0; i < k; i++) {
            final TansClient client = cb.getClient();
            final String key = "domain-object-id-" + i;
            Runnable r = () -> {
                ClientRunner runner = new ClientRunner(client, key, 1, n, executor, endLatch);
                System.out.println("Start thread for " + key);
                runner.run();
            };
            executor.submit(r);
        }

        StopWatch watch = StopWatch.createStarted();
        startLatch.countDown();

        endLatch.await();
        watch.stop();
        double total = watch.getTime(TimeUnit.MILLISECONDS);
        System.out.println(String.format("Total elapsed %.0f ms, total OPS is %.1f", total, (n * k) / (total / 1000)));
        cb.close();
        executor.shutdownNow();

    }

    private static class ClientRunner {
        private TansClient client;
        private int n;
        private String key;
        private int v;
        private volatile boolean done;
        private volatile int i;
        private StopWatch watch;
        private ExecutorService executor;
        private CountDownLatch endLatch;

        public ClientRunner(TansClient client, String key, int v, int n, ExecutorService executor, CountDownLatch endLatch) {
            this.client = client;
            this.n = n;
            this.key = key;
            this.v = v;
            this.executor = executor;
            this.endLatch = endLatch;
        }

        public void run() {
            this.watch = StopWatch.createStarted();
            this.i = 0;
            this.done = false;
            this.execute();
        }

        private void execute() {
            Future<LongRange> future = client.acquire(key, v);
            future.addListener(f -> {
                if (f.isSuccess()) {
                    i++;
                    //System.out.println(future.get());
                    if (i < n) {
                        executor.submit(this::execute);
                    }
                    else {
                        endExec();
                    }
                }
                else {
                    f.cause().printStackTrace();
                    endExec();
                }
            });
        }

        public void endExec() {
            watch.stop();
            double total = watch.getTime(TimeUnit.MILLISECONDS);
            System.out.println(String.format("elapsed %.0f ms, %.2f ms per req", total, total / i));
            client.close();
            this.done = true;
            endLatch.countDown();
        }

        public boolean isDone() {
            return done;
        }
    }

    public static void main2(String[] args) throws Exception {
        String pattern = "http://localhost:8081/acquire?key=%s&n=%d";

        for (int i = 0; i < 10; i++) {
            List<String> urls = new ArrayList<>();
            for (int j = 0; j < 100; j++) {
                int k = (i + 1) * 10000 + j;
                urls.add(String.format(pattern, "object" + k + ".id", i % 5 + 1));
            }

            ClientApp app = new ClientApp();
            app.run(urls, 1, 300);//URLS.subList(0, 3));
        }
    }

    public void run(List<String> urls, int connections, int total) throws Exception {
        HttpTaskRunner runner = new HttpTaskRunner(this::handleResponse);
        for (String url : urls) {
            URI uri = toUri(url);
            runner.addTask(uri.getHost(), uri.getPort(), createRequest(uri),
                    connections, total);
        }
        runner.run();
    }

    private static HttpRequest createRequest(URI uri) {
        HttpRequest request = new DefaultFullHttpRequest(
                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getPath() + "?" + uri.getQuery(), Unpooled.EMPTY_BUFFER);
        request.headers().set(HttpHeaderNames.HOST, uri.getHost());
        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);
        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.TEXT_PLAIN);

        return request;
    }

    private void handleResponse(InetSocketAddress from, HttpResponse response, HttpContent content) {
        //System.out.println("processEvent");
        boolean isRedirect = HttpTaskRunner.isRedirectCode(response.status().code());
        String s = isRedirect ?
                response.headers().get(HttpHeaderNames.LOCATION)
                : content.content().toString(CharsetUtil.UTF_8).lines().findFirst().orElseGet(() -> "");

        String info = String.format("%s, %s, %s [%s]",
                response.headers().get(HttpHeaderNames.HOST),
                response.headers().get(HttpHeaderNames.FROM),
                response.status().codeAsText(),
                s);
        System.err.println(info);
    }

    private URI toUri(String url) {
        try {
            return new URI(url);
        }
        catch (URISyntaxException e) {
            throw new RuntimeException();
        }
    }
}
