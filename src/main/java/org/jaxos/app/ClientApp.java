/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.jaxos.app;

import org.apache.commons.lang3.time.StopWatch;
import org.jaxos.JaxosConfig;
import org.jaxos.algo.*;
import org.jaxos.netty.NettyCommunicatorFactory;

import java.util.concurrent.TimeUnit;

public class ClientApp {

    public static void main(String[] args) throws Exception {
        JaxosConfig config = new ArgumentParser().parse(args);
        ClientApp app = new ClientApp(config);
        app.run();
    }


    private JaxosConfig config;
    private Communicator communicator;

    public ClientApp(JaxosConfig config) {
        this.config = config;
    }

    public void run() throws Exception {
        Acceptor acceptor = new Acceptor();
        Proposal proposal = new Proposal(config, () -> communicator);
        NettyCommunicatorFactory factory = new NettyCommunicatorFactory(config, new LocalEventCenter(proposal, acceptor));
        this.communicator = factory.createSender();

        StopWatch w = StopWatch.createStarted();
        for(int i = 0; i < 10 ; i++) {
            byte[] s = "AreYouCrazy".getBytes("UTF-8");
            proposal.propose(s);

            if(i >= 0){
                break;
            }
            int ballot = (int)(20000 * Math.random());
            Event.PrepareRequest prepare = new Event.PrepareRequest(config.serverId(), 1000, ballot);
            communicator.broadcast(prepare);


            Event.AcceptRequest accept = new Event.AcceptRequest(config.serverId(), 1000, ballot, s);
            communicator.broadcast(accept);
            Thread.sleep(500);
        }
        w.stop();
        long ms = w.getTime(TimeUnit.MILLISECONDS);
        System.out.println(String.format("Spent %d ms", ms));
    }
}
